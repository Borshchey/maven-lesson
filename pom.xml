<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- комментарий через ctrl + / как и в исходниках -->


    <!--    1. Обязательная информация GAV -->
    <groupId>ru.itmo</groupId> <!--    уникальный идентификатор группы -->
    <artifactId>maven-lesson</artifactId>   <!--    уникальный идентификатор проекта внутри группы -->
    <version>1.0-SNAPSHOT</version> <!--    текущая версия проекта -->

    <!-- 2. Дополнительная информация   -->
    <name>Maven lesson</name>
    <description></description>
    <url></url>

    <!-- 3. Тип файла, который будет доступен в результате сборки -->
    <!-- 3.1. jar (по умолчанию) /
         3.2. war - jar + сервлеты, статические файлы фронт-энд и т.п /
         3.3. ear - содержит javaEE модули /
         3.4. pom - для родительских pom файлов -->
    <!-- jar, war и ear - zip архивы, в настоящее время принято собирать jar вместо war и ear,
         если проект построен на Spring Framework -->
    <packaging>jar</packaging>

    <!-- 4. Свойства проекта -->
    <properties>
        <!-- версия компилятора -->
        <maven.compiler.source>20</maven.compiler.source>
        <maven.compiler.target>20</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <!-- 5. Репозитории. В репозиториях хранятся артефакты - jar и пр. архивы -->
    <!-- 5.1. Локальный (на каждого пользователя) - /.m2/repository -->
    <!-- 5.2. Центральный (глобальный) -->
    <!-- 5.3. Корпоративный -->
    <!--
    <repositories>
        <repository>
            <id>company-id-01</id>
            <url>ссылка на репозиторий</url>
        </repository>
    </repositories>
    -->

    <!-- 6. Зависимости -->
    <dependencies> <!-- все необходимые зависимости -->
        <!-- Система сборки сначала ищет зависимость в локальном репозитории,
             если не находит, обращается в центральный,
             скачивает зависимость в локальный репозиторий и подключает к проекту.
             Если зависимость находится в локальном репозитории, то Maven не будет искать ее в центральном,
             а сразу подключит к проекту.
             Исключения - артефакты с версией *-SNAPSHOT, SNAPSHOT указывает на то, что версия находятся в разработке,
             в этом случае Maven всегда бут обновлять зависимость из центрального репозитория -->
        <dependency> <!-- каждая конкретная зависимость -->
            <groupId>org.projectlombok</groupId> <!-- идентификатор группы, которой принадлежит артефакт -->
            <artifactId>lombok</artifactId> <!-- идентификатор артефакта -->
            <version>1.18.26</version> <!-- версия артефакта -->
            <scope>provided</scope> <!-- область видимости зависимости -->
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <version>2.15.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
            <version>2.15.0</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.15.1</version>
        </dependency>





        <!-- Область видимости зависимости: -->
        <!-- <scope>compile</scope> - значение по умолчанию, зависимость доступна
                                    во время сборки (компиляции), тестирования, выполнения -->
        <!-- <scope>test</scope> - зависимость доступна во время тестирования -->
        <!-- <scope>provided</scope> - код библиотеки не попадет в скомпилированные файлы и итоговый архив
                                      (аналогична compile, но не попадет в сборку). Обычно такие зависимости
                                      связаны с генерацией кода. В сборку попадает уже результат работы зависимости -->
        <!-- <scope>system</scope>
             <systemPath>путь к библиотеке на компьютере разработчика</systemPath> -->

        <!-- <scope>import</scope> - используется в модульной сборки -->

        <!-- <scope>runtime</scope> зависимость доступна только во время выполнения.
                                    Нет прямого доступа к коду библиотеки (import невозможен) при написании кода -->
    </dependencies>


    <!-- 7. Плагины -->

    <!-- Основные фазы сборки (основные этапы жизненного цикла Maven проекта): -->
    <!-- 1. clean - удаление папки target со всем ее содержимым (фаза может выполняться самостоятельно или
            предшествовать другим фазам, например compile)  -->
    <!-- 2. validate - проверка исходного кода  -->
    <!-- 3. compile - компиляция (фазе предшествуют фазы clean и validate)  -->
    <!-- 4. test - запуск тестов (фаза выполняется самостоятельно)  -->
    <!-- 5. package - создание архива, тип определен тегом packaging
            (фазе предшествуют фазы clean, validate, compile)  -->
    <!-- 6. verify - проверяет артефакт для последующей отправки в maven репозиторий  -->
    <!-- 7. install - добавление артефакта в локальный репозиторий  -->
    <!-- 8. deploy - добавление артефакта в удаленный репозиторий  -->
    <!-- 9. site - генерация документации, сайта проекта  -->

    <!-- Сами по себе фазы ничего не делают, не выполняют задач.
         К фазам необходимо подключать плагины, которые выполняют поставленные перед ними задачи.
         К одной фазе можно подключить несколько плагинов, каждый плагин может выполнять несколько задач.
         Если к фазе не подключено ни одного плагина, то задачи, поставленные перед фазой просто не будут выполнены.
         К фазам уже подключены плагины, можно заменить их другими или изменить настройки,
         а можно добавить совершенно новые плагины и подключить их к различным фазам -->
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>19</source>
                    <target>19</target>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>